{"Typealiases.html#/s:5Async10LazyFuturea":{"name":"LazyFuture","abstract":"<p>A closure that returns a future.</p>"},"Typealiases.html#/s:5Async20FutureResultCallbacka":{"name":"FutureResultCallback","abstract":"<p>Callback for accepting a result.</p>"},"Structs/DirectoryConfig.html#/s:5Async15DirectoryConfigV7workDirSSv":{"name":"workDir","abstract":"<p>The working directory</p>","parent_name":"DirectoryConfig"},"Structs/DirectoryConfig.html#/s:5Async15DirectoryConfigVACSS7workDir_tcfc":{"name":"init(workDir:)","abstract":"<p>Create a new directory config.</p>","parent_name":"DirectoryConfig"},"Structs/DirectoryConfig.html#/s:5Async15DirectoryConfigV6detectACyFZ":{"name":"detect()","abstract":"<p>Creates a directory config with default working directory.</p>","parent_name":"DirectoryConfig"},"Structs/DirectoryConfig.html":{"name":"DirectoryConfig","abstract":"<p>FIXME: move this to a better module"},"Protocols/FutureType.html#/s:5Async10FutureTypeP6Resulta":{"name":"Result","abstract":"<p>This future&rsquo;s result type.</p>","parent_name":"FutureType"},"Protocols/FutureType.html#/s:5Async10FutureTypeP10addAwaiteryyAA0B6ResultOy11ExpectationQzGc8callback_tF":{"name":"addAwaiter(callback:)","abstract":"<p>Undocumented</p>","parent_name":"FutureType"},"Protocols/BasicWorker.html#/s:5Async11BasicWorkerP9eventLoopXev":{"name":"eventLoop","abstract":"<p>Undocumented</p>","parent_name":"BasicWorker"},"Protocols/BasicWorker.html#/s:5Async11BasicWorkerPAAE4nextXeXeF":{"name":"next()","abstract":"<p>Undocumented</p>","parent_name":"BasicWorker"},"Protocols/BasicWorker.html#/s:5Async11BasicWorkerPAAE18shutdownGracefullyySo13DispatchQueueC5queue_ys5Error_pSgctF":{"name":"shutdownGracefully(queue:_:)","abstract":"<p>Undocumented</p>","parent_name":"BasicWorker"},"Protocols/BasicWorker.html":{"name":"BasicWorker","abstract":"<p>Undocumented</p>"},"Protocols/FutureType.html":{"name":"FutureType","abstract":"<p>A future result type."},"Functions.html#/s:5Async2qqoiXeXeF":{"name":"??(_:_:)","abstract":"<p>Applies nil coalescing to a future&rsquo;s optional and a concrete type</p>"},"Functions.html#/s:5Async3mapXeXeF":{"name":"map(to:_:_:_:_:)","abstract":"<p>Calls the supplied callback when all three futures have completed.</p>"},"Functions.html#/s:5Async7flatMapXeXeF":{"name":"flatMap(to:_:_:_:_:)","abstract":"<p>Calls the supplied callback when all three futures have completed.</p>"},"Extensions/Promise.html#/s:5Async8completeXeXeF":{"name":"complete()","abstract":"<p>Undocumented</p>","parent_name":"Promise"},"Extensions/Promise.html#/s:5Async4failXeXeF":{"name":"fail(_:)","abstract":"<p>Undocumented</p>","parent_name":"Promise"},"Extensions/Promise.html#/s:5Async6futureXev":{"name":"future","abstract":"<p>Undocumented</p>","parent_name":"Promise"},"Extensions/Promise.html#/s:5Async7succeedXeXeF":{"name":"succeed()","abstract":"<p>Undocumented</p>","parent_name":"Promise"},"Extensions/EventLoopFuture.html#/s:5Async10addAwaiterXeXeF":{"name":"addAwaiter(callback:)","abstract":"<p>Undocumented</p>","parent_name":"EventLoopFuture"},"Extensions/Worker.html#/s:5Async9eventLoopXev":{"name":"eventLoop","abstract":"<p>This worker&rsquo;s event loop. All async work done","parent_name":"Worker"},"Extensions/EventLoop.html#/s:5Async10newPromiseXeXeF":{"name":"newPromise(_:file:line:)","abstract":"<p>Creates a new promise for the specified type.</p>","parent_name":"EventLoop"},"Extensions/Array.html#/s:Sa5AsyncE9transformXeXeF":{"name":"transform(on:to:)","abstract":"<p>Transforms a successful future to the supplied value.</p>","parent_name":"Array"},"Extensions/Collection.html#/s:s10CollectionP5AsyncsAARzAC10FutureType7ElementRpzlE2doXeXeF":{"name":"do(on:_:)","abstract":"<p>Adds a handler to be asynchronously executed on","parent_name":"Collection"},"Extensions/Collection.html#/s:s10CollectionP5AsyncsAARzAC10FutureType7ElementRpzlE5catchXeXeF":{"name":"catch(on:_:)","abstract":"<p>Adds a handler to be asynchronously executed on","parent_name":"Collection"},"Extensions/Collection.html#/s:s10CollectionP5AsyncsAARzAC10FutureType7ElementRpzlE6alwaysXeXeF":{"name":"always(on:_:)","abstract":"<p>Get called back whenever all of these futures are complete,","parent_name":"Collection"},"Extensions/Collection.html#/s:s10CollectionP5AsyncE11syncFlattenXeXeF":{"name":"syncFlatten(on:)","abstract":"<p>Flattens an array of lazy futures into a future with an array of results.","parent_name":"Collection"},"Extensions/Collection.html#/s:s10CollectionP5AsyncsAARzAC10FutureType7ElementRpzlE7flattenXeXeF":{"name":"flatten(on:)","abstract":"<p>Flattens an array of futures into a future with an array of results.","parent_name":"Collection"},"Extensions/Collection.html#/s:s10CollectionP5AsyncE7flattenXeXeF":{"name":"flatten(on:)","abstract":"<p>Flattens an array of void futures into a single one.</p>","parent_name":"Collection"},"Extensions/Collection.html#/s:s10CollectionP5AsyncsAARzAC10FutureType7ElementRpzlE3mapXeXeF":{"name":"map(to:on:_:)","abstract":"<p>See <code>Future.map</code></p>","parent_name":"Collection"},"Extensions/Collection.html#/s:s10CollectionP5AsyncsAARzAC10FutureType7ElementRpzlE7flatMapXeXeF":{"name":"flatMap(to:on:_:)","abstract":"<p>See <code>Future.flatMap</code></p>","parent_name":"Collection"},"Extensions/Collection.html#/s:s10CollectionP5AsyncE3mapXeXeF":{"name":"map(to:on:_:)","abstract":"<p>See <code>Future.map</code></p>","parent_name":"Collection"},"Extensions/Collection.html#/s:s10CollectionP5AsyncE7flatMapXeXeF":{"name":"flatMap(to:on:_:)","abstract":"<p>See <code>Future.flatMap</code></p>","parent_name":"Collection"},"Extensions/Future.html#/s:5Async2doXeXeF":{"name":"do(_:)","abstract":"<p>Adds a handler to be asynchronously executed on","parent_name":"Future"},"Extensions/Future.html#/s:5Async5catchXeXeF":{"name":"catch(_:)","abstract":"<p>Adds a handler to be asynchronously executed on","parent_name":"Future"},"Extensions/Future.html#/s:5Async6alwaysXeXeF":{"name":"always(_:)","abstract":"<p>Get called back whenever the future is complete,","parent_name":"Future"},"Extensions/Future.html#/s:5Async7flatMapXeXeFZ":{"name":"flatMap(_:)","abstract":"<p>Undocumented</p>","parent_name":"Future"},"Extensions/Future.html#/s:5Async3mapXeXeFZ":{"name":"map(_:)","abstract":"<p>Undocumented</p>","parent_name":"Future"},"Extensions/Future.html#/s:5Async3mapXeXeF":{"name":"map(to:_:)","abstract":"<p>Maps a future to a future of a different type.","parent_name":"Future"},"Extensions/Future.html#/s:5Async7flatMapXeXeF":{"name":"flatMap(to:_:)","abstract":"<p>Maps a future to a future of a different type.","parent_name":"Future"},"Extensions/Future.html#/s:5Async8catchMapXeXeF":{"name":"catchMap(_:)","abstract":"<p>Calls the supplied closure if the chained Future resolves to an Error.</p>","parent_name":"Future"},"Extensions/Future.html#/s:5Async12catchFlatMapXeXeF":{"name":"catchFlatMap(_:)","abstract":"<p>Calls the supplied closure if the chained Future resolves to an Error.</p>","parent_name":"Future"},"Extensions/Future.html#/s:5Async9transformXeXeF":{"name":"transform(to:)","abstract":"<p>Maps the current future to contain the new type. Errors are carried over, successful (expected) results are transformed into the given instance.</p>","parent_name":"Future"},"Extensions/Future.html#/s:5Async5awaitXeXeF":{"name":"await(on:)","abstract":"<p>Undocumented</p>","parent_name":"Future"},"Extensions/Future.html#/s:5Async4doneXeXeFZ":{"name":"done(on:)","abstract":"<p>Undocumented</p>","parent_name":"Future"},"Extensions/Future.html#/s:5Async5chainXeXeF":{"name":"chain(to:)","abstract":"<p>Chains a future to a promise of the same type.</p>","parent_name":"Future"},"Extensions/ByteBuffer.html#/s:5Async8readDataXeXeF":{"name":"readData(length:)","abstract":"<p>Read <code>length</code> bytes off this <code>ByteBuffer</code>, move the reader index forward by <code>length</code> bytes and return the result","parent_name":"ByteBuffer"},"Extensions/ByteBuffer.html#/s:5Async7getDataXeXeF":{"name":"getData(at:length:)","abstract":"<p>Return <code>length</code> bytes starting at <code>index</code> and return the result as <code>Data</code>. This will not change the reader index.</p>","parent_name":"ByteBuffer"},"Extensions/ByteBuffer.html#/s:5Async9getStringXeXeF":{"name":"getString(at:length:encoding:)","abstract":"<p>Get a <code>String</code> decoding <code>length</code> bytes starting at <code>index</code> with <code>encoding</code>. This will not change the reader index.</p>","parent_name":"ByteBuffer"},"Extensions/Data.html#/s:10Foundation4DataV5AsyncE15withUnsafeBytesxxs0E16RawBufferPointerVKcKlF":{"name":"withUnsafeBytes(_:)","abstract":"<p>Undocumented</p>","parent_name":"Data"},"Extensions/Data.html":{"name":"Data"},"Extensions/ByteBuffer.html":{"name":"ByteBuffer"},"Extensions/Future.html":{"name":"Future"},"Extensions/Collection.html":{"name":"Collection"},"Extensions/Array.html":{"name":"Array"},"Extensions/EventLoop.html":{"name":"EventLoop"},"Extensions/Worker.html":{"name":"Worker","abstract":"<p>Has an EventLoop.</p>"},"Extensions/EventLoopFuture.html":{"name":"EventLoopFuture"},"Extensions/Promise.html":{"name":"Promise"},"Enums/FutureResult.html#/s:5Async12FutureResultO5errorACyxGs5Error_pcAEmlF":{"name":"error","abstract":"<p>Undocumented</p>","parent_name":"FutureResult"},"Enums/FutureResult.html#/s:5Async12FutureResultO7successACyxGxcAEmlF":{"name":"success","abstract":"<p>Undocumented</p>","parent_name":"FutureResult"},"Enums/FutureResult.html#/s:5Async12FutureResultO5errors5Error_pSgv":{"name":"error","abstract":"<p>Returns the result error or","parent_name":"FutureResult"},"Enums/FutureResult.html#/s:5Async12FutureResultO6resultxSgv":{"name":"result","abstract":"<p>Returns the result expectation or","parent_name":"FutureResult"},"Enums/FutureResult.html#/s:5Async12FutureResultO6unwrapxyKF":{"name":"unwrap()","abstract":"<p>Throws an error if this contains an error, returns the Expectation otherwise</p>","parent_name":"FutureResult"},"Enums/FutureResult.html":{"name":"FutureResult","abstract":"<p>Undocumented</p>"},"Classes/QueueHandler.html#/s:5Async12QueueHandlerC9InboundIna":{"name":"InboundIn","abstract":"<p>See <code>ChannelInboundHandler.InboundIn</code></p>","parent_name":"QueueHandler"},"Classes/QueueHandler.html#/s:5Async12QueueHandlerC11OutboundOuta":{"name":"OutboundOut","abstract":"<p>See <code>ChannelInboundHandler.OutboundOut</code></p>","parent_name":"QueueHandler"},"Classes/QueueHandler.html#/s:5Async12QueueHandlerCXeXecfc":{"name":"init(on:onError:)","abstract":"<p>Create a new <code>QueueHandler</code> on the supplied worker.</p>","parent_name":"QueueHandler"},"Classes/QueueHandler.html#/s:5Async12QueueHandlerC7enqueueXeXeF":{"name":"enqueue(_:onInput:)","abstract":"<p>Enqueue new output to the handler.</p>","parent_name":"QueueHandler"},"Classes/QueueHandler.html#/s:5Async12QueueHandlerC11channelReadXeXeF":{"name":"channelRead(ctx:data:)","abstract":"<p>MARK: ChannelInboundHandler conformance","parent_name":"QueueHandler"},"Classes/QueueHandler.html#/s:5Async12QueueHandlerC13channelActiveXeXeF":{"name":"channelActive(ctx:)","abstract":"<p>See <code>ChannelInboundHandler.channelActive(ctx:)</code></p>","parent_name":"QueueHandler"},"Classes/QueueHandler.html#/s:5Async12QueueHandlerC11errorCaughtXeXeF":{"name":"errorCaught(ctx:error:)","abstract":"<p>See <code>ChannelInboundHandler.errorCaught(error:)</code></p>","parent_name":"QueueHandler"},"Classes/QueueHandler.html":{"name":"QueueHandler","abstract":"<p>Controls a Swift NIO pipeline of <code>[In]</code> -&gt; <code>[Out]</code>.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}